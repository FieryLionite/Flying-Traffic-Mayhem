<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprC4</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Car</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
size = 1;
topSpeed = 25;
persist = true;
//col = c_red;
mount0 = createTool(machinegun, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> /*image_xscale = size;
image_yscale = size;*/
col = c_white
if (falling){
    if (getY()&lt; 1000){
        falling = false;
        fall = 0;
    }
    col = c_black
    fall += accel*2;
    y += fall;
}
 if (getY() &gt; 1000)
    falling = true;
dir = 0;
width= sprite_get_width(sprite_index)*size;
height = sprite_height;
keepstill = false;
for (i = 0; i &lt; instance_number(Car); i ++){
    c = instance_find(Car, i);
    if (c.id == id || c.id == target)
        continue;
        
    if !(size &lt;= c.size &amp;&amp; abs(c.bbox_left - bbox_right) &lt; width &amp;&amp; ((abs(c.bbox_bottom - bbox_top)) &lt; width || (abs(bbox_bottom - c.bbox_top)) &lt; width ))
        continue;
        
    dis = distance_to_object(c);
    if (dis &lt; width){
        //"nudge" the car away from others
        dx = c.x - x;
        dy = c.y - y;
        if (dis &lt; 10 || speed == 0)
            continue;
        x -= dx/dis*speed/20* (1 - dis/width);//* (1 - dis/width)
        y -= dy/dis*speed/20* (1 - dis/width);
        
        //turning slightly if target is in front
        if (size &lt;= c.size){
        change = 0;
        if (dy &lt; 0 &amp;&amp; abs(dy/dx) &lt; 0.5)
            change = 1;
        else if (dy &gt;=0 &amp;&amp; dy/dx &lt; 0.5)
            change = 2;
        
        if (change == 1 &amp;&amp; dir &gt; 0) || (change == 2 &amp;&amp; dir &lt; 0){
            keepstill = true;
            dir = 0;
            }else
            slow = 45;
        
        hwidth = width/2;
        switch change{
            case 1: if (collision_rectangle(x - hwidth,y + height,x + hwidth, y + height*2, Car, 0, 1)&lt; 0 &amp;&amp;  y &lt; room_height - sprite_height*2) dir = -20/size; break;
            case 2: if (collision_rectangle(x - hwidth,y - height,x + hwidth, y - height*2, Car, 0, 1)&lt; 0 &amp;&amp; y &gt; sprite_height*2) dir = 20/size; break;
            }
        }
    }
}
hwidth = width/2;
if (dir == 0 &amp;&amp; instance_number(Player) &gt; 0){
    change = 0;
    if (y &lt; Player.y)
        change = 1
    if (y &gt; Player.y)
        change = 2;
    pd = point_direction(x, y, Player.x, Player.y);
    ty = Player.y;
    Player.y = -50000;
    switch change{
    case 1: if (collision_rectangle(x - hwidth,y + height,x + hwidth, y + height*2, Car, 0, 1)&lt; 0) dir = pd; break;
    case 2: if (collision_rectangle(x - hwidth,y - height,x + hwidth, y - height*2, Car, 0, 1)&lt; 0) dir = pd; break;
    Player.y = ty;
}
}

/*if (slow &gt; 0){
    gear = topSpeed/2;
    slow --;
    }
else*/
dx = Player.x - x ;
if (dx &gt; 200)
    gear = topSpeed;
else if (dx &gt; 0)
    gear = Control.horSpeed;
else if(dx &lt; 0)
    gear = 0;
    
if (speed &lt; gear)
    speed += accel;
if (speed &gt; gear)
    speed -= accel;
    
    
if (x &lt; -1000 or x &gt; 2500) &amp;&amp; !persist{
    instance_destroy();
}

if (dir != direction){
    direction = getTurn(direction, dir, turnSp);
}

image_angle = direction;

if (instance_exists(mount0)){
    with(mount0){
    x = parent.x + lengthdir_x(dis, angle + parent.image_angle);
    y = parent.y + lengthdir_y(dis, angle + parent.image_angle);
    }
}

if (instance_exists(mount1)){
    with(mount1){
    x = parent.x + lengthdir_x(dis, angle + parent.image_angle);
    y = parent.y + lengthdir_y(dis, angle + parent.image_angle);
    }
}
target = Player.id;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
draw_text(x,y+100, string(Control.verCurrent - y + Player.y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
